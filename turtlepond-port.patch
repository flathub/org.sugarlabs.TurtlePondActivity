index 10f7777..dd6d96f 100644
--- a/TurtlePondActivity.py
+++ b/TurtlePondActivity.py
@@ -16,7 +16,6 @@ gi.require_version('Gtk', '3.0')
 from gi.repository import Gtk, GObject, Gdk
 
 import sugar3
-from sugar3.activity import activity
 from sugar3 import profile
 from sugar3.graphics.toolbarbox import ToolbarBox
 from sugar3.bundle.activitybundle import ActivityBundle
@@ -44,6 +43,10 @@ from utils import svg_str_to_pixbuf
 import logging
 _logger = logging.getLogger('turtle-in-a-pond-activity')
 
+from sugarapp.widgets import DesktopOpenChooser
+from sugarapp.widgets import SugarCompatibleActivity
+
+
 BEGINNER = 0
 INTERMEDIATE = 1
 EXPERT = 2
@@ -52,7 +55,7 @@ LEVEL_LABELS = [_('Beginner'), _('Intermediate'), _('Expert'),
                 _('My strategy')]
 
 
-class TurtlePondActivity(activity.Activity):
+class TurtlePondActivity(SugarCompatibleActivity):
     """ Turtle in a Pond puzzle game """
 
     def __init__(self, handle):
@@ -165,42 +168,26 @@ class TurtlePondActivity(activity.Activity):
         return
 
     def _do_load_python_cb(self, button):
-        ''' Load Python code from the Journal. '''
-        self._chooser('org.laptop.Pippy',
-                self._load_python_code_from_journal)
+        ''' Load Python code from the file system. '''
+        chooser = DesktopOpenChooser(self)
+        chooser.add_filter('.py', '.py')
+        filename = chooser.get_filename()
+        if not filename:
+            return
+        self._load_python_code_from_journal(filename)
         if self._game.strategies[CUSTOM] is not None:
             self.custom_button.set_active(True)
         self._game.level = CUSTOM
         self._game.new_game()
 
-    def _load_python_code_from_journal(self, dsobject):
-        """ Read the Python code from the Journal object """
+    def _load_python_code_from_journal(self, filename):
+        """ Read the Python code from the file """
         python_code = None
         try:
-            _logger.debug("opening %s " % dsobject.file_path)
-            file_handle = open(dsobject.file_path, "r")
+            _logger.debug("opening %s " % filename)
+            file_handle = open(filename, "r")
             python_code = file_handle.read()
             file_handle.close()
         except IOError:
-            _logger.debug("couldn't open %s" % dsobject.file_path)
+            _logger.debug("couldn't open %s" % filename)
         self._game.strategies[CUSTOM] = python_code
-
-    def _chooser(self, filter, action):
-        ''' Choose an object from the datastore and take some action '''
-        chooser = None
-        try:
-            chooser = ObjectChooser(parent=self, what_filter=filter)
-        except TypeError:
-            chooser = ObjectChooser(
-                None, self,
-                Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT)
-        if chooser is not None:
-            try:
-                result = chooser.run()
-                if result == Gtk.ResponseType.ACCEPT:
-                    dsobject = chooser.get_selected_object()
-                    action(dsobject)
-                    dsobject.destroy()
-            finally:
-                chooser.destroy()
-                del chooser

